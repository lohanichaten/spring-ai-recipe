package com.learning.component;

import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.client.ChatClientRequest;
import org.springframework.ai.chat.client.ChatClientResponse;
import org.springframework.ai.chat.client.advisor.api.CallAdvisor;
import org.springframework.ai.chat.client.advisor.api.CallAdvisorChain;
import org.springframework.ai.chat.evaluation.RelevancyEvaluator;
import org.springframework.ai.chat.model.ChatResponse;
import org.springframework.ai.evaluation.EvaluationRequest;
import org.springframework.ai.evaluation.EvaluationResponse;
import org.springframework.ai.rag.advisor.RetrievalAugmentationAdvisor;
import org.springframework.util.Assert;

/**
 * A guardrail that evaluates the relevancy of the output generated by the chat client.
 */
public class RelevancyEvaluatorOutputGuardrail implements CallAdvisor {

    private final RelevancyEvaluator relevancyEvaluator;

    public RelevancyEvaluatorOutputGuardrail(ChatClient.Builder chatClientBuilder) {
        Assert.notNull(chatClientBuilder, "chatClientBuilder cannot be null");
        this.relevancyEvaluator = new RelevancyEvaluator(chatClientBuilder.clone());
    }

    @Override
    public ChatClientResponse adviseCall(ChatClientRequest chatClientRequest, CallAdvisorChain callAdvisorChain) {
        ChatClientResponse chatClientResponse = callAdvisorChain.nextCall(chatClientRequest);

        ChatResponse chatResponse = chatClientResponse.chatResponse();
        if (chatResponse == null) {
            return chatClientResponse;
        }

        EvaluationRequest evaluationRequest = new EvaluationRequest(
                chatClientRequest.prompt().getUserMessage().getText(),
                chatResponse.getMetadata().get(RetrievalAugmentationAdvisor.DOCUMENT_CONTEXT),
                chatResponse.getResult().getOutput().getText());

        EvaluationResponse evaluationResponse = relevancyEvaluator.evaluate(evaluationRequest);

        if (evaluationResponse.isPass()) {
            return chatClientResponse;
        }

        // TODO: Implement reprompt to rephrase the answer and retry for better relevancy.

        return chatClientResponse;
    }

    @Override
    public String getName() {
        return this.getClass().getSimpleName();
    }

    @Override
    public int getOrder() {
        return 0;
    }

}
